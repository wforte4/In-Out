generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(cuid())
  email              String         @unique
  name               String?
  password           String
  profileImage       String?
  defaultHourlyRate  Float?         // Default hourly rate for the employee
  emailVerified      Boolean        @default(false)
  emailVerifiedAt    DateTime?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  accounts           Account[]
  memberships        Membership[]
  ownedOrganizations Organization[] @relation("OrganizationOwner")
  sessions           Session[]
  timeEntries        TimeEntry[]
  editedTimeEntries  TimeEntry[]    @relation("TimeEntryEditor")
  createdSchedules   Schedule[]     @relation("ScheduleCreator")
  assignedShifts     Shift[]        @relation("AssignedShifts")
  sentInvitations    Invitation[]   @relation("InvitationCreator")
  createdProjects    Project[]      @relation("ProjectCreator")
  projectCosts       ProjectCost[]  @relation("ProjectCostUser")
  createdProjectCosts ProjectCost[] @relation("ProjectCostCreator")
  passwordResetTokens PasswordResetToken[]
  emailVerificationTokens EmailVerificationToken[]
  projectAssignments ProjectEmployee[]
  auditLogs AuditLog[]

  @@map("users")
}

model Organization {
  id          String       @id @default(cuid())
  name        String
  code        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  ownerId     String
  memberships Membership[]
  owner       User         @relation("OrganizationOwner", fields: [ownerId], references: [id])
  timeEntries TimeEntry[]
  schedules   Schedule[]
  invitations Invitation[]
  projects    Project[]
  auditLogs   AuditLog[]

  @@map("organizations")
}

model Membership {
  id             String       @id @default(cuid())
  role           Role         @default(EMPLOYEE)
  joinedAt       DateTime     @default(now())
  userId         String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("memberships")
}

model TimeEntry {
  id             String        @id @default(cuid())
  clockIn        DateTime
  clockOut       DateTime?
  totalHours     Float?
  description    String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  userId         String
  organizationId String?
  projectId      String?
  editedBy       String?
  editedAt       DateTime?
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project        Project?      @relation(fields: [projectId], references: [id], onDelete: SetNull)
  editor         User?         @relation("TimeEntryEditor", fields: [editedBy], references: [id])

  @@map("time_entries")
}

model Schedule {
  id             String   @id @default(cuid())
  name           String
  description    String?
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator        User     @relation("ScheduleCreator", fields: [createdBy], references: [id])
  shifts         Shift[]

  @@map("schedules")
}

model Shift {
  id           String    @id @default(cuid())
  scheduleId   String
  userId       String?
  projectId    String?
  title        String
  description  String?
  startTime    DateTime
  endTime      DateTime
  isRecurring  Boolean   @default(false)
  recurringPattern String? // e.g., "weekly", "daily", "monthly"
  recurringEndDate DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  schedule     Schedule  @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  assignedUser User?     @relation("AssignedShifts", fields: [userId], references: [id])
  project      Project?  @relation("ShiftProject", fields: [projectId], references: [id], onDelete: SetNull)

  @@map("shifts")
}

model Invitation {
  id             String           @id @default(cuid())
  email          String
  role           Role             @default(EMPLOYEE)
  organizationId String
  invitedBy      String
  token          String           @unique
  status         InvitationStatus @default(PENDING)
  expiresAt      DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviter        User             @relation("InvitationCreator", fields: [invitedBy], references: [id])

  @@map("invitations")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Project {
  id               String        @id @default(cuid())
  name             String
  description      String?
  status           ProjectStatus @default(ACTIVE)
  organizationId   String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  createdBy        String
  estimatedHours   Float?
  hourlyRate       Float?        // Default hourly rate for this project
  fixedCost        Float?        // Fixed project cost
  organization     Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator          User          @relation("ProjectCreator", fields: [createdBy], references: [id])
  timeEntries      TimeEntry[]
  projectCosts     ProjectCost[]
  shifts           Shift[]       @relation("ShiftProject")
  projectEmployees ProjectEmployee[]

  @@map("projects")
}

model ProjectCost {
  id          String      @id @default(cuid())
  projectId   String
  userId      String?     // If null, applies to all users on project
  costType    CostType
  amount      Float
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   String
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User?       @relation("ProjectCostUser", fields: [userId], references: [id], onDelete: Cascade)
  creator     User        @relation("ProjectCostCreator", fields: [createdBy], references: [id])

  @@map("project_costs")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}

model AuditLog {
  id             String     @id @default(cuid())
  userId         String
  action         AuditAction
  entityType     String     // "TIME_ENTRY", "USER", "PROJECT", "ORGANIZATION", etc.
  entityId       String?    // ID of the affected entity
  entityName     String?    // Name/description of the affected entity for display
  oldValues      Json?      // Previous values before change
  newValues      Json?      // New values after change
  metadata       Json?      // Additional context (IP address, user agent, etc.)
  organizationId String?    // Organization context if applicable
  createdAt      DateTime   @default(now())
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

model ProjectEmployee {
  id             String   @id @default(cuid())
  projectId      String
  userId         String
  hourlyRate     Float?   // Project-specific hourly rate (overrides default)
  role           String?  // Project role like "Developer", "Designer", etc.
  isActive       Boolean  @default(true)
  joinedAt       DateTime @default(now())
  leftAt         DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  project        Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_employees")
}

enum Role {
  EMPLOYEE
  ADMIN
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum CostType {
  HOURLY_RATE
  FIXED_COST
  EXPENSE
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum AuditAction {
  // Time Entry Actions
  TIME_ENTRY_CREATED
  TIME_ENTRY_UPDATED
  TIME_ENTRY_DELETED
  TIME_CLOCK_IN
  TIME_CLOCK_OUT
  
  // User Management Actions
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  USER_ROLE_CHANGED
  USER_RATE_CHANGED
  USER_REMOVED_FROM_ORG
  
  // Organization Actions
  ORGANIZATION_CREATED
  ORGANIZATION_UPDATED
  ORGANIZATION_DELETED
  
  // Project Actions
  PROJECT_CREATED
  PROJECT_UPDATED
  PROJECT_DELETED
  PROJECT_MEMBER_ADDED
  PROJECT_MEMBER_REMOVED
  PROJECT_MEMBER_RATE_CHANGED
  
  // Authentication Actions
  LOGIN_SUCCESS
  LOGIN_FAILED
  LOGOUT
  PASSWORD_CHANGED
  EMAIL_VERIFIED
  
  // Admin Actions
  ADMIN_ACCESS_GRANTED
  ADMIN_ACCESS_REVOKED
  DATA_EXPORTED
  BULK_OPERATION
}
