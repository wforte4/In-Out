// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Organization relationships
  ownedOrganizations Organization[] @relation("OrganizationOwner")
  memberships        Membership[]

  // Time tracking
  timeEntries TimeEntry[]

  // NextAuth
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique // Short code for joining org
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  owner       User         @relation("OrganizationOwner", fields: [ownerId], references: [id])
  ownerId     String
  memberships Membership[]

  @@map("organizations")
}

model Membership {
  id     String @id @default(cuid())
  role   Role   @default(EMPLOYEE)
  joinedAt DateTime @default(now())

  // Relationships
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  @@unique([userId, organizationId])
  @@map("memberships")
}

model TimeEntry {
  id          String    @id @default(cuid())
  clockIn     DateTime
  clockOut    DateTime?
  totalHours  Float?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map("time_entries")
}

enum Role {
  EMPLOYEE
  ADMIN
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
