generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(cuid())
  email              String         @unique
  name               String?
  password           String
  profileImage       String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  accounts           Account[]
  memberships        Membership[]
  ownedOrganizations Organization[] @relation("OrganizationOwner")
  sessions           Session[]
  timeEntries        TimeEntry[]
  editedTimeEntries  TimeEntry[]    @relation("TimeEntryEditor")
  createdSchedules   Schedule[]     @relation("ScheduleCreator")
  assignedShifts     Shift[]        @relation("AssignedShifts")
  sentInvitations    Invitation[]   @relation("InvitationCreator")

  @@map("users")
}

model Organization {
  id          String       @id @default(cuid())
  name        String
  code        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  ownerId     String
  memberships Membership[]
  owner       User         @relation("OrganizationOwner", fields: [ownerId], references: [id])
  timeEntries TimeEntry[]
  schedules   Schedule[]
  invitations Invitation[]

  @@map("organizations")
}

model Membership {
  id             String       @id @default(cuid())
  role           Role         @default(EMPLOYEE)
  joinedAt       DateTime     @default(now())
  userId         String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("memberships")
}

model TimeEntry {
  id             String        @id @default(cuid())
  clockIn        DateTime
  clockOut       DateTime?
  totalHours     Float?
  description    String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  userId         String
  organizationId String?
  editedBy       String?
  editedAt       DateTime?
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  editor         User?         @relation("TimeEntryEditor", fields: [editedBy], references: [id])

  @@map("time_entries")
}

model Schedule {
  id             String   @id @default(cuid())
  name           String
  description    String?
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator        User     @relation("ScheduleCreator", fields: [createdBy], references: [id])
  shifts         Shift[]

  @@map("schedules")
}

model Shift {
  id           String    @id @default(cuid())
  scheduleId   String
  userId       String?
  title        String
  description  String?
  startTime    DateTime
  endTime      DateTime
  isRecurring  Boolean   @default(false)
  recurringPattern String? // e.g., "weekly", "daily", "monthly"
  recurringEndDate DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  schedule     Schedule  @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  assignedUser User?     @relation("AssignedShifts", fields: [userId], references: [id])

  @@map("shifts")
}

model Invitation {
  id             String           @id @default(cuid())
  email          String
  role           Role             @default(EMPLOYEE)
  organizationId String
  invitedBy      String
  token          String           @unique
  status         InvitationStatus @default(PENDING)
  expiresAt      DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviter        User             @relation("InvitationCreator", fields: [invitedBy], references: [id])

  @@map("invitations")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  EMPLOYEE
  ADMIN
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}
